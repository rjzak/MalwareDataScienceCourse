#!/usr/bin/python3

import os
from binascii import hexlify


def ngramFromBuffer(ngramSize, buffer):
    for index in range(len(buffer)-ngramSize):
        yield buffer[index:index+ngramSize]


def findNgrams(goodDir, malDir, N, K, result):
    ngrams_collected = dict()
    print("Collecting %d-grams." % N)
    for sourceDir in (goodDir, malDir):  # Remove goodDir from the tuple to only find prevalent ngrams from malware
        for root, dirs, files in os.walk(sourceDir):
            for fi in files:
                file_contents = open(os.path.join(root, fi), "rb").read()
                for gram in ngramFromBuffer(N, file_contents):
                    if gram in ngrams_collected:
                        ngrams_collected[gram] += 1
                    else:
                        ngrams_collected[gram] = 1

    print("Sorting.")
    sorted_ngrams = sorted(ngrams_collected.items(), reverse=True, key=lambda x: x[1])
    sorted_ngrams = sorted_ngrams[:min(len(sorted_ngrams), K)]
    print("Writing %s" % result)
    with open(result, "w") as result_file:
        for gram_value, count in sorted_ngrams:
            result_file.write(str(hexlify(gram_value))[2:-1] + ",")
        result_file.write("label\n")

        for root, dirs, files in os.walk(goodDir):
            for fi in files:
                file_contents = open(os.path.join(root, fi), "rb").read()
                for gram_value, count in sorted_ngrams:
                    if gram_value in file_contents:
                        result_file.write("1,")
                    else:
                        result_file.write("0,")
                result_file.write("0\n")

        for root, dirs, files in os.walk(malDir):
            for fi in files:
                file_contents = open(os.path.join(root, fi), "rb").read()
                for gram_value, count in sorted_ngrams:
                    if gram_value in file_contents:
                        result_file.write("1,")
                    else:
                        result_file.write("0,")
                result_file.write("1\n")


if __name__ == '__main__':
    import sys

    if len(sys.argv) != 6:
        print("Usage: %s <GoodwareDir> <MalwareDir> <NgramSize> <TopK> <OutputFile>" %
              sys.argv[0])
        sys.exit(1)

    goodDir = sys.argv[1]
    malDir = sys.argv[2]
    gramSize = int(sys.argv[3])
    topK = int(sys.argv[4])
    resultFile = sys.argv[5]
    findNgrams(goodDir, malDir, gramSize, topK, resultFile)