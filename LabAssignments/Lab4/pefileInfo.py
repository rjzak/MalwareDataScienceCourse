#!/usr/bin/python3

import os
import sys
import pefile

from entropy import H

if len(sys.argv) != 2:
    print("Usage: %s <PEFile>" % sys.argv[0])
    sys.exit(1)

if open(sys.argv[1], "rb").read(2) != b"MZ":
    print("%s is not a PE32 file!" % sys.argv[1])
    sys.exit(1)

pe = pefile.PE(sys.argv[1])
print(pe.dump_info())
print("Machine: ", hex(pe.FILE_HEADER.Machine))
print("Subsystem: ", hex(pe.OPTIONAL_HEADER.Subsystem))

entropy = H(open(sys.argv[1], "rb").read())
print("Entropy: %1.4f" % entropy)

print("Major Linker Version: ", hex(pe.OPTIONAL_HEADER.MajorLinkerVersion))
print("Minor Linker Version: ", hex(pe.OPTIONAL_HEADER.MinorLinkerVersion))

numberOfImportedDLLs = 0
numberOfImportedFunctions = 0
for entry in pe.DIRECTORY_ENTRY_IMPORT:
    numberOfImportedDLLs += 1
    for imp in entry.imports:
        numberOfImportedFunctions += 1
        #print(imp.name)
print("Imported... DLLs: %d, Functions: %d" % (numberOfImportedDLLs, numberOfImportedFunctions))

print("Size of Stack Reserve: ", hex(pe.OPTIONAL_HEADER.SizeOfStackReserve))
print("Size of Stack Commit: ", hex(pe.OPTIONAL_HEADER.SizeOfStackCommit))
print("Size of Heap Reserve: ", hex(pe.OPTIONAL_HEADER.SizeOfHeapReserve))
print("Size of Heap Commit: ", hex(pe.OPTIONAL_HEADER.SizeOfHeapCommit))
print("Warnings: ", ",".join(pe.get_warnings()))

beyondFileSize = False
fileSize = os.path.getsize(sys.argv[1])
maxSize = 0
for section in pe.sections:
    maxSize = max(section.VirtualAddress + section.SizeOfRawData, maxSize)
    if section.VirtualAddress + section.SizeOfRawData > fileSize:
        beyondFileSize = True
print("Max size: %d, File Size: %d" % (maxSize, fileSize))
overlayOffset = pe.get_overlay_data_start_offset()
print("Overlay: ", int(overlayOffset is not None))

language_ids = set()
print("Rich Header: ", pe.RICH_HEADER)
for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
    for resource_id in resource_type.directory.entries:
        for resource_lang in resource_id.directory.entries:
            print(resource_lang.data.lang, resource_lang.data.sublang)
            language_ids.add(resource_lang.data.lang)