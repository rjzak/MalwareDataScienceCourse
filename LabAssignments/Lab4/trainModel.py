#!/usr/bin/python3

import os
import sys
import time
import graphviz
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.datasets import load_svmlight_file
from sklearn.metrics import precision_recall_fscore_support, roc_curve, auc

def loadData(dPath):
    data = load_svmlight_file(dPath)
    return data[0], data[1]

def trainModel(trainingDataPath, testingDataPath, modelOutput):
    trainData, trainLabels = loadData(trainingDataPath)
    testData, testLabels = loadData(testingDataPath)

    print("Training on %d samples." % trainData.shape[0])
    print("Testing on %d samples." % testData.shape[0])

    plt.figure()
    lw = 1
    models = (("LogisticRegression", LogisticRegression(solver='liblinear', random_state=0)), ("DecisionTree", DecisionTreeClassifier(random_state=0)), ("SVM", SVC(gamma='auto', random_state=0)), ("Neural Network (100, 20)", MLPClassifier(hidden_layer_sizes=(100, 20), max_iter=200, random_state=0)), ("Neural Network (200, 40)", MLPClassifier(hidden_layer_sizes=(200, 40), max_iter=200, random_state=0)),)
    graph_colors = {"LogisticRegression": "red", "DecisionTree": "green", "SVM": "orange", "Neural Network (100, 20)": "teal", "Neural Network (200, 40)": "navy"}
    for model_name, model_type in models:
        print("\n%s" % model_name)
        start = time.perf_counter()
        model_type.fit(trainData, trainLabels)
        if model_name == "DecisionTree":
            dot_data = export_graphviz(model_type, out_file=None)
            graph = graphviz.Source(dot_data)
            graph.render("malware_decision_tree")
        elapsed = time.perf_counter() - start
        accuracy = model_type.score(trainData, trainLabels) * 100.0
        print("Training took %1.2f seconds." % elapsed)
        print("Training Accuracy: %1.2f%%" % accuracy)
        accuracy = model_type.score(testData, testLabels) * 100.0
        print("Testing Accuracy: %1.2f%%" % accuracy)
        y_pred = model_type.predict(testData)
        precision, recall, fscore, support = precision_recall_fscore_support(testLabels, y_pred, average='binary')
        fpr, tpr, thresholds = roc_curve(testLabels, y_pred)
        auc_score = auc(fpr, tpr)
        plt.plot(fpr, tpr, color=graph_colors[model_name], lw=lw, label='%s (AUC = %1.4f)' % (model_name, auc_score))
        print("\tPrecision: %1.2f" % precision)
        print("\tRecall: %1.2f" % recall)
        print("\tF1: %1.2f" % fscore)
        print("\tAUC: %1.2f" % auc_score)

    plt.plot([0, 1], [0, 1], color='black', lw=lw, linestyle='--', label='Guess')
    plt.plot([0.01, 0.01, 1], [0, 1, 1], color='silver', lw=1.5, linestyle='--', label='Ideal')
    plt.plot([0.01, 0.98, 1], [0.01, 0.01, 1], color='gray', lw=1.5, linestyle='-.', label='Inverse (Labels Swapped)')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristics')
    plt.legend(loc="lower right", fontsize='small')
    plt.savefig("model_roc.png", dpi=200)

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print("Usage: %s <TrainingData> <TestingData> <ModelFileOutput>" % sys.argv[0])
        sys.exit(1)

    trainingData = sys.argv[1]
    testingData = sys.argv[2]
    modelOutput = sys.argv[3]

    for fPath in (trainingData, testingData):
        if not os.path.isfile(fPath):
            print("Error: %s is not a file." % fPath)
            sys.exit(1)

    trainModel(trainingData, testingData, modelOutput)