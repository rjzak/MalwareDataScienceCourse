#!/usr/bin/python3

import pefile
import sys
import argparse
import os
import pprint
import networkx
import re
import string
from networkx.drawing.nx_agraph import write_dot
import collections
from networkx.algorithms import bipartite

ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
ValidHostnameRegex = "(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])"

def onlyPrintable(input):
    return [chr(x) for x in input if (x > 47 and x < 58) or (x > 64 and x < 91) or (x > 96 and x < 123)]

def isSectionExecutable(section):
    characteristics = getattr(section, 'Characteristics')
    if characteristics & 0x00000020 > 0 or characteristics & 0x20000000 > 0:
        return True
    return False

if __name__ == '__main__':
    parser = argparse.ArgumentParser("%s: Visualize shared hostnames between a directory of malware samples" % sys.argv[0])
    parser.add_argument("--malwareDir", help="directory with malware samples", required=True)
    parser.add_argument("--output", help="file to write DOT file to", required=True)
    #parser.add_argument("--outputMalware", help="file to write DOT file to")
    #parser.add_argument("hostname_projection", help="file to write DOT file to")
    args = parser.parse_args()
    network = networkx.Graph()
    ipRegex = re.compile(ValidIpAddressRegex)
    hostnameRegex = re.compile(ValidHostnameRegex)
    errorCount = 0
    test = hostnameRegex.findall("apple.com google.com something.whatever.net")
    if len(test) < 1:
        print("Bad hostname RegEx.")
        sys.exit(1)
    for root, dirs, files in os.walk(args.malwareDir):
        for fi in files:
            fpath = os.path.join(root, fi)
            try:
                pe = pefile.PE(fpath)
            except pefile.PEFormatError:
                errorCount += 1
                continue

            for section in pe.sections:
                if not isSectionExecutable(section):
                    results = hostnameRegex.findall("".join(onlyPrintable(section.get_data())))
                    if len(results) > 0:
                        network.add_node(fi, color='black', penwidth=5, bipartite=0)
                        for result in results:
                            print(result)
                            network.add_node(result, label=result, color='blue', penwidth=10, bipartite=1)
                            network.add_edge(result, fi, penwidth=2)
    print("Encountered %d PE parsing errors." % errorCount)
    write_dot(network, args.output)
    #malware_network = bipartite.projected_graph(network)