#!/usr/bin/python3

from __future__ import print_function
import sys
import argparse
import os
import networkx
from networkx.drawing.nx_agraph import write_dot
import hashlib
import ssdeep

md5 = lambda x: hashlib.md5(open(x, "rb").read()).hexdigest()

if __name__ == '__main__':
    parser = argparse.ArgumentParser("%s: Visualize SSDeep similarity between malware samples" % sys.argv[0])
    parser.add_argument("--malwareDir", help="directory with malware samples", required=True)
    parser.add_argument("--goodwareDir", help="directory with goodware samples", required=False)
    parser.add_argument("--output", help="file to write DOT file to", required=True)
    args = parser.parse_args()
    network = networkx.Graph()

    filesList = list()
    for root, dirs, files in os.walk(args.malwareDir):
        for fi in files:
            fpath = os.path.join(root, fi)
            filesList.append(fpath)

    goodwareFiles = list()
    if args.goodwareDir:
        for root, dirs, files in os.walk(args.goodwareDir):
            for fi in files:
                fpath = os.path.join(root, fi)
                goodwareFiles.append(fpath)

    print("Found %d files." % (len(filesList) + len(goodwareFiles)))

    maxSim = 0.0
    connections = 0
    goodwareFound = False
    fuzzyHashes = dict()
    regularHashes = dict()
    for f1 in filesList:
        if f1 in regularHashes:
            buf1_md5 = regularHashes[f1]
        else:
            buf1 = open(f1, "rb").read()
            buf1_md5 = md5(f1)
        if f1 in fuzzyHashes:
            d1 = fuzzyHashes[f1]
        else:
            d1 = ssdeep.hash(buf1)
            fuzzyHashes[f1] = d1
        for f2 in filesList:
            if f1 == f2:
                continue
            buf2 = None
            if f2 in fuzzyHashes:
                d2 = fuzzyHashes[f2]
            else:
                if buf2 is None:
                    buf2 = open(f2, "rb").read()
                d2 = ssdeep.hash(buf2)
                fuzzyHashes[f2] = d2
            similarity = ssdeep.compare(d1, d2)
            if similarity > maxSim:
                maxSim = similarity
            if similarity > 40.0:
                connections += 1
                if f2 in regularHashes:
                    buf2_md5 = regularHashes[f2]
                else:
                    if buf2 is None:
                        buf2 = open(f2, "rb").read()
                    buf2_md5 = md5(f2)
                network.add_node(buf1_md5, color='red', penwidth=10, bipartite=1)
                network.add_node(buf2_md5, color='red', penwidth=10, bipartite=1)
                network.add_edge(buf1_md5, buf2_md5, label="%d" % similarity, penwidth=2)
        for goodFile in goodwareFiles:
            if goodFile not in fuzzyHashes or goodFile not in fuzzyHashes:
                buf2 = open(goodFile, "rb").read()
            if goodFile in fuzzyHashes:
                d2 = fuzzyHashes[goodFile]
            else:
                d2 = ssdeep.hash(buf2)
                fuzzyHashes[goodFile] = d2
            similarity = ssdeep.compare(d1, d2)
            if similarity > 40.0:
                goodwareFound = True
                connections += 1
                if goodFile in regularHashes:
                    buf2_md5 = regularHashes[goodFile]
                else:
                    buf2_md5 = md5(goodFile)
                    regularHashes[goodFile] = buf2_md5
                network.add_node(buf1_md5, color='red', penwidth=10, bipartite=1)
                network.add_node(buf2_md5, color='green', penwidth=10, bipartite=1)
                network.add_edge(buf1_md5, buf2_md5, label="%d" % similarity, penwidth=2)

    if connections > 0:
        print("Max similarity: %1.2f" % maxSim)
        write_dot(network, args.output)
        if goodwareFound:
            print("Some goodware was found to have similarity with malware.")